import telebot, os, logging, math
from telebot.types import InputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
from cc_data import ALIENS, ESSENCE_ALIENS, FLARES, TECHNOLOGIES, HAZARDS, STATIONS, LOCALIZATION_EN, ACHIEVEMENTS, ARTIFACTS
from stats import *
from datetime import datetime

load_dotenv()

logging.basicConfig(level=logging.INFO)

try:
	bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))
except Exception as e:
	logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
	exit()

ITEMS_PER_PAGE = 10
BUTTONS_PER_ROW = 2
DLC_LIST = ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–Ω–∞–≥—Ä–∞–¥—ã', '–º–∞—Ä–∫–µ—Ä—ã –∫–æ—Ä–∞–±–ª–µ–π', '–¥–∏—Å–∫–∏ —Å–æ—é–∑–æ–≤', '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏', '–∫–∞—Ä—Ç–æ—á–∫–∏ —É–≥—Ä–æ–∑']
pending_games = {}
pending_game_players = {}
waitlist = {}
selected_winners = {}
pending_comments = {}

def send_paginated_keyboard(chat_id, message_id, items: list, page: int, item_prefix: str, page_prefix: str, item_label: str, items_per_page: int = 8, row_width: int = 2, callback_func=None, page_callback_func=None):
	total_pages = math.ceil(len(items) / items_per_page)
	page = max(0, min(page, total_pages - 1))

	start = page * items_per_page
	end = start + items_per_page
	current_items = sorted(items)[start:end]

	keyboard = InlineKeyboardMarkup(row_width=row_width)

	buttons = [
		InlineKeyboardButton(
			text=item.capitalize(),
			callback_data=callback_func(item, start + i, page) if callback_func else f"{item_prefix}:{start + i}:{page}"
		) for i, item in enumerate(current_items)
	]

	for i in range(0, len(buttons), row_width):
		keyboard.add(*buttons[i:i + row_width])

	nav_buttons = []
	if page > 0:
		nav_cb = page_callback_func(page - 1) if page_callback_func else f"{page_prefix}_page:{page - 1}"
		nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=nav_cb))
	if page < total_pages - 1:
		nav_cb = page_callback_func(page + 1) if page_callback_func else f"{page_prefix}_page:{page + 1}"
		nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=nav_cb))

	if nav_buttons:
		keyboard.add(*nav_buttons)

	text = f"–í—ã–±–µ—Ä–∏ {item_label} (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages})"

	if message_id:
		bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)
	else:
		bot.send_message(chat_id, text, reply_markup=keyboard)

def send_achievements_page(chat_id, message_id, page):
	send_paginated_keyboard(
		chat_id, message_id, list(ACHIEVEMENTS.keys()), page,
		item_prefix="achieve", page_prefix="achieve",
		item_label="–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", items_per_page=8, row_width=2
	)

def send_artifacts_page(chat_id, message_id, page):
	send_paginated_keyboard(
		chat_id, message_id, sorted(list(ARTIFACTS.keys())), page,
		item_prefix="art", page_prefix="art",
		item_label="–∞—Ä—Ç–µ—Ñ–∞–∫—Ç", items_per_page=8, row_width=2
	)

def send_stations_page(chat_id, message_id, page):
	send_paginated_keyboard(
		chat_id, message_id, list(STATIONS.keys()), page,
		item_prefix="station", page_prefix="station",
		item_label="—Å—Ç–∞–Ω—Ü–∏—é", items_per_page=10, row_width=2
	)

def send_technologies_page(chat_id, message_id, page):
	send_paginated_keyboard(
		chat_id, message_id, list(TECHNOLOGIES.keys()), page,
		item_prefix="tech", page_prefix="tech",
		item_label="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é", items_per_page=10, row_width=2
	)

def send_hazards_page(chat_id, message_id, page):
	send_paginated_keyboard(
		chat_id, message_id, list(HAZARDS.keys()), page,
		item_prefix="hazard", page_prefix="hazard",
		item_label="—É–≥—Ä–æ–∑—É", items_per_page=10, row_width=2
	)


def send_alien_page(chat_id, message_id, page, game_id=None, player_id=None):
	def alien_callback(name, index, page):
		if game_id and player_id:
			return f"select_alien:{name}:{page}:{game_id}:{player_id}"
		return f"alien:{name}:{page}"

	def page_callback(new_page):
		if game_id and player_id:
			return f"page:{new_page}:{game_id}:{player_id}"
		return f"page:{new_page}"

	send_paginated_keyboard(
		chat_id=chat_id,
		message_id=message_id,
		items=list(ALIENS.keys()),
		page=page,
		item_prefix="alien",
		page_prefix="page",
		item_label="–ø—Ä–∏—à–µ–ª—å—Ü–∞",
		items_per_page=10,
		row_width=2,
		callback_func=alien_callback,
		page_callback_func=page_callback
	)

def send_history_page(chat_id, player_games, page, message_id=None):
	if not player_games or page >= len(player_games):
		bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return

	game = player_games[page]
	player_id = game['player_id']
	creator_id = game['creator_id']

	estimations = []

	response = (
		f'üìú –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä (–∏–≥—Ä–∞ {page + 1} –∏–∑ {len(player_games)}):\n\n'
		f'üéÆ –ò–≥—Ä–∞ #{game["game_id"]} {"üèÜ –ü–æ–±–µ–¥–∞!" if game["am_i_winner"] else "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"}\n'
		f'üëΩ –¢—ã –∏–≥—Ä–∞–ª –∑–∞: {game["my_alien"].capitalize() if game["my_alien"] else "Nonono"}\n'
		f'‚≠ê –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞: {game["my_estimation"]}/5\n'
		f'üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: {game["comment"] or "‚Äî"}\n'
		f'üóìÔ∏è –î–∞—Ç–∞: {game["date"].strftime("%d.%m.%Y %H:%M")}\n\n'
		'üë• –ò–≥—Ä–æ–∫–∏:\n'
	)

	estimations.append(game["my_estimation"])
	comments_text = ''
	for opp in game['opponents']:
		tg = bot.get_chat(opp['player_id'])
		tg_name = f'@{tg.username} ({tg.first_name})' if tg.username else f"{tg.first_name}"
		status = "üèÜ" if opp["is_winner"] else "‚ùå"
		estimation = f'{opp["estimation"]}/5‚≠ê' if opp["estimation"] is not None else "‚Äî"
		estimations.append(opp["estimation"])
		response += f'‚Ä¢ üëΩ {opp["alien"].capitalize()} {status} ({tg_name}) ‚Äî {estimation}\n'
		if opp["comment"]:
			comments_text += f'{tg_name} -  {opp["comment"]}\n'

	try: response += f'\nüåü –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä—Ç–∏–∏: {format_integer(round(sum([e for e in estimations if e is not None]) / len([e for e in estimations if e is not None]), 2))}\n'
	except: pass
	response += f'\nüß© –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {game["dlc"] or "‚Äî"}\n'
	if comments_text:
		response += 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n'+comments_text
	keyboard = InlineKeyboardMarkup(row_width=3)
	keyboard.add(InlineKeyboardButton(
		"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É",
		callback_data=f"change_rating:{game['game_id']}:{int(game['am_i_winner'] or 0)}"
	))

	nav_buttons = []
	if page > 0:
		nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history:{page - 1}"))
	if page < len(player_games) - 1:
		nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"history:{page + 1}"))

	if nav_buttons:
		keyboard.add(*nav_buttons)

	if player_id == creator_id and len(get_game_players(game['game_id'])) <= 2:
		keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data=f"deletegame:{game['game_id']}"))

	keyboard.add(InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_game:{game['game_id']}"))
	if message_id:
		bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=response, reply_markup=keyboard)
	else:
		bot.send_message(chat_id, response, reply_markup=keyboard)


def send_other_photos(chat_id, object_name, is_private=True):
	media = []

	all_photos = {**HAZARDS, **TECHNOLOGIES, **STATIONS, **ARTIFACTS}
	image_path = all_photos[object_name]
	if type(image_path) != list:
		image_path = [image_path]

	for photo in image_path:
		if os.path.exists(photo):
			card_name = photo.split('/')[-1].replace('_', ' ').replace('.jpg', '')
			media.append(InputMediaPhoto(media=open(photo, 'rb'), caption=f"–ö–∞—Ä—Ç–∞: {card_name.capitalize()}"))
		else:
			logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
	bot.send_media_group(chat_id, media)

def send_alien_photos(chat_id, alien_name, is_private=True):
	media = []
	loc_rev = {k.lower(): i for i, k in LOCALIZATION_EN.items()}
	if alien_name in loc_rev:
		alien_name = loc_rev[alien_name]

	if alien_name in ALIENS:
		image_path = ALIENS[alien_name]
		if os.path.exists(image_path):
			if alien_name in LOCALIZATION_EN:
				caption=f"–ü—Ä–∏—à–µ–ª–µ—Ü: {alien_name.capitalize()} ({LOCALIZATION_EN[alien_name]})"
			else:
				caption=f"–ü—Ä–∏—à–µ–ª–µ—Ü: {alien_name.capitalize()}"
			media.append(InputMediaPhoto(media=open(image_path, 'rb'), caption=caption))
		else:
			logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")

	if alien_name in FLARES:
		flare_path = FLARES[alien_name]
		if os.path.exists(flare_path):
			media.append(InputMediaPhoto(media=open(flare_path, 'rb'), caption="–í—Å–ø—ã—à–∫–∞"))
		else:
			logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {flare_path}")

	if alien_name in ESSENCE_ALIENS:
		essence_path = ESSENCE_ALIENS[alien_name]
		if os.path.exists(essence_path):
			media.append(InputMediaPhoto(media=open(essence_path, 'rb'), caption=f"–ö–∞—Ä—Ç—ã: {alien_name.capitalize()}"))
		else:
			logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {essence_path}")

	if media:
		try:
			bot.send_media_group(chat_id, media)
			alien_stats = get_alien_stats(alien_name)
			games_count = len(alien_stats)
			if alien_stats == []: return

			winrate = len([i for i in alien_stats if i['is_winner']]) / games_count * 100
			avg_est = sum([i['estimation'] for i in alien_stats])

			games_ids = [i['game_id'] for i in alien_stats]
			other_estimations = []
			for game in alien_stats:
				game_players = get_game_players(game['game_id'])
				alien_player = [i['player_id'] for i in game_players if i['alien'] == alien_name][0]
				[other_estimations.append((i['estimation'], i['is_winner'])) for i in game_players if i['player_id'] != alien_player]

			winrate_vs_alien = format_integer(round(len([i for i in other_estimations if i[1]]) / len(other_estimations)*100, 2))
			avg_est_vs_alien = format_integer(sum([i[0] for i in other_estimations]) / len(other_estimations))

			bot.send_message(chat_id,
				f'üëΩ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—à–µ–ª—å—Ü–∞:*\n\n'
				f'üéÆ –ö–æ–ª-–≤–æ –∏–≥—Ä: *{games_count}*\n'
				f'üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: *{format_integer(round(winrate, 2))}%*\n'
				f'‚öîÔ∏è –í–∏–Ω—Ä–µ–π—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: *{format_integer(round(winrate_vs_alien, 2))}%*\n'
				f'üåü –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∏–≥—Ä: *{format_integer(round(avg_est, 2))}*\n'
				f'‚≠ê –û—Ü–µ–Ω–∫–∞ –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *{format_integer(round(avg_est_vs_alien, 2))}*',
				parse_mode='Markdown'
			)

		except Exception as e:
			logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞: {e}")
			bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
	else:
		if is_private: bot.send_message(chat_id, f"{alien_name}.\n–ê –≥–¥–µ –∞ –Ω–µ—Ç")

def create_game_message(game_id, creator_id, comment, dlc_list, game_players):
	creator = bot.get_chat(creator_id).username or f"User{creator_id}"
	dlc_str = ", ".join(dlc_list) if dlc_list else "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π"
	text = f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ #{game_id}\n–°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {dlc_str}\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

	if game_players.get(game_id):
		text += "\n–ò–≥—Ä–æ–∫–∏: "
		for i in game_players[game_id]:
			text += '\n'+ (i.username if i.username else i.first_name)

	keyboard = InlineKeyboardMarkup()
	keyboard.add(InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è/–í—ã–π—Ç–∏", callback_data=f"join_game:{game_id}"))
	keyboard.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"check_game:{game_id}"))
	keyboard.add(InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data=f"end_game:{game_id}:{creator_id}"))
	return text, keyboard

def send_winner_selection(chat_id, game_id):
	keyboard = generate_updated_winner_keyboard(game_id, chat_id)
	bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)

def generate_updated_winner_keyboard(game_id, chat_id):
	players = get_game_players(game_id)
	keyboard = InlineKeyboardMarkup(row_width=2)
	winners = selected_winners.get(game_id, set())

	for player in players:
		player_id = player['player_id']
		username = bot.get_chat(player_id).username or f"User{player_id}"
		is_selected = player_id in winners
		text = f"{'‚úÖ ' if is_selected else ''}@{username}"
		keyboard.add(InlineKeyboardButton(text, callback_data=f"winner_toggle:{game_id}:{player_id}"))

	keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data=f"finalize_game:{game_id}"))
	return keyboard

def send_rating_request(chat_id, game_id, player_id, is_winner):
	keyboard = InlineKeyboardMarkup(row_width=5)
	for i in range(1, 6):
		keyboard.add(InlineKeyboardButton(f"{i} ‚≠ê", callback_data=f"rate:{game_id}:{player_id}:{is_winner}:{i}"))
	bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É (1-5 –∑–≤–µ–∑–¥):", reply_markup=keyboard)

def send_achieve_info(chat_id, player_id, achievement_id, message_id=None):
	achievement = sorted(list(ACHIEVEMENTS.keys()))[achievement_id]
	achievement_info = ACHIEVEMENTS[achievement]
	keyboard = InlineKeyboardMarkup()

	player_achievements = [i['achievement'] for i in get_player_achievements(player_id)]

	if achievement not in player_achievements:
		keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data=f"add_achieve:{achievement_id}:{player_id}"))
	else:
		keyboard.add(InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data=f"del_achieve:{achievement_id}:{player_id}"))

	text = f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement}\n{achievement_info}"
	if not message_id:
		bot.send_message(chat_id, text, reply_markup=keyboard)
	else:
		bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)

@bot.message_handler(commands=['ceval'])
def eval_message(message):
	if message.from_user.id == 818175547:
		bot.send_message(message.chat.id, str(eval(message.text.replace('/ceval ', ''))))

@bot.message_handler(commands=['analysis'])
def analysis_handler(message):
	with open('data/analysis.txt') as f:
		analysis = f.read().split('///')

	for i in analysis:
		bot.reply_to(message, i)

@bot.message_handler(commands=['site'])
def site_message(message):
	keyboard = InlineKeyboardMarkup()
	keyboard.add(InlineKeyboardButton(text="–°–∞–π—Ç", url="https://3g.stariybog.ru/cc/"))
	keyboard.add(InlineKeyboardButton(text="–≠–º–æ–¥–∂–∏", url="https://t.me/addemoji/CosmicEncounter"))

	bot.reply_to(message, '–û–º–∞–≥–∞–¥!!!\n–°–∞–π—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π - https://3g.stariybog.ru/cc/\n–≠–º–æ–¥–∂–∏ –ö–æ—Å–º–∏–∫ –ï–Ω–∫–∞—É–Ω—Ç–µ—Ä - https://t.me/addemoji/CosmicEncounter', reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def send_welcome(message):
	try:
		add_player(bot.get_chat(message.from_user.id))
		bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–∏—à–µ–ª—å—Ü–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –µ–≥–æ –≤ /aliens")
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(commands=['achievements'])
def achievements_handler(message):
	send_achievements_page(chat_id=message.chat.id, message_id=None, page=0)

@bot.message_handler(commands=['stations'])
def stations_handler(message):
	send_stations_page(chat_id=message.chat.id, message_id=None, page=0)

@bot.message_handler(commands=['technologies', 'tech'])
def stations_handler(message):
	send_technologies_page(chat_id=message.chat.id, message_id=None, page=0)

@bot.message_handler(commands=['artifacts'])
def artifacts_handler(message):
	send_artifacts_page(chat_id=message.chat.id, message_id=None, page=0)

@bot.message_handler(commands=['hazards'])
def stations_handler(message):
	send_hazards_page(chat_id=message.chat.id, message_id=None, page=0)

@bot.message_handler(commands=['aliens'])
def aliens_handler(message):
	send_alien_page(chat_id=message.chat.id, message_id=None, page=0)

def format_integer(okak):
	return okak if okak != int(okak) else int(okak)

def winrate_calculator(player_games):
	try: wr = len([i for i in player_games if i['am_i_winner']]) / len(player_games) * 100
	except: wr = 0
	wr = format_integer(wr)
	wr = round(wr, 2)
	return wr

def average_estimation_calculator(player_games):
	try: avg_est = sum([i['my_estimation'] for i in player_games]) / len(player_games)
	except: avg_est = 0
	avg_est = format_integer(avg_est)
	avg_est = round(avg_est, 2)
	return avg_est

@bot.message_handler(commands=['history'])
def player_history(message):
	player_games = get_player_stats(message.from_user.id)

	if not player_games:
		bot.reply_to(message, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.")
		return

	send_history_page(message.chat.id, player_games, page=0)

@bot.message_handler(commands=['profile'])
def user_profile(message):
	player_games = get_player_stats(message.from_user.id)

	wl = ' '.join(['W' if i['am_i_winner'] else 'L' for i in player_games][:5])

	player_achievements = get_player_achievements(message.from_user.id)

	winrate = winrate_calculator(player_games)
	avg_est = average_estimation_calculator(player_games)
	aliens_stats = {i: [] for i in ALIENS}
	for game in player_games:
		aliens_stats[game['my_alien']].append(game)

	alien_stat_message = ""
	for alien in sorted(aliens_stats, key=lambda x: len(aliens_stats[x])):
		alien_games = aliens_stats[alien]
		if alien_games == []: continue
		alien_winrate = winrate_calculator(alien_games)
		alien_avg_est = average_estimation_calculator(alien_games)
		alien_stat_message+=f"\n  ‚Ä¢ {alien.capitalize()} - {len(alien_games)} –∏–≥—Ä, {alien_winrate}% –ø–æ–±–µ–¥, {alien_avg_est}‚≠êÔ∏è"

	achievements_message = "\nü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞" #–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–ø–∏—Å–∞—Ç—å
	for achievement in player_achievements:
		achievements_message += f"\n  ‚Ä¢ {achievement['achievement']} - {achievement['date'].strftime('%d.%m.%Y %H:%M')}"

	resp_mes = f"üë§ –ò–≥—Ä–æ–∫: {bot.get_chat(message.from_user.id).username}\nüèÜ {wl}\nüèÖ –ü–æ–±–µ–¥—ã: {winrate}% | ‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_est}\n\nüß¨ –ü—Ä–∏—à–µ–ª—å—Ü—ã: {alien_stat_message}\n{achievements_message}"
	bot.reply_to(message, resp_mes)

@bot.message_handler(commands=['party'])
def party_menu(message):
	try:
		msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ:")
		bot.register_next_step_handler(msg, handle_game_comment, message.from_user.id)
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ party_menu: {e}")

def generate_dlc_keyboard(creator_id):
	dlcs = pending_games.get(creator_id, {'dlcs': set()})['dlcs']
	keyboard = InlineKeyboardMarkup(row_width=2)
	for dlc in DLC_LIST:
		text = f"‚úÖ {dlc.capitalize()}" if dlc in dlcs else dlc.capitalize()
		keyboard.add(InlineKeyboardButton(text, callback_data=f"dlc:{creator_id}:{dlc}"))
	keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data=f"create_game:{creator_id}"))
	return keyboard

def handle_game_comment(message, creator_id):
	comment = message.text.strip()
	pending_games[creator_id] = {'comment': comment, 'dlcs': set()}
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=generate_dlc_keyboard(creator_id))

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
	try:
		data = call.data.split(":")
		action = data[0]
		if action == "alien":
			_, alien_name, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_alien_photos(call.message.chat.id, alien_name)
			send_alien_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id)

		elif action == "station":
			_, station_index, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_other_photos(call.message.chat.id, list(STATIONS)[int(station_index)])
			send_stations_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id)

		elif action == "tech":
			_, technology_index, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_other_photos(call.message.chat.id, list(TECHNOLOGIES)[int(technology_index)])
			send_technologies_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id, 'FFFFFFFFFFFFFFFF'+str(technology_index))

		elif action == "hazard":
			_, hazard_index, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_other_photos(call.message.chat.id, list(HAZARDS)[int(hazard_index)])
			send_hazards_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id)

		elif action == "art":
			_, art_index, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_other_photos(call.message.chat.id, sorted(list(ARTIFACTS))[int(art_index)])
			send_artifacts_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id)

		elif action == "change_rating":
			game_id, is_winner = map(int, data[1:3])
			player_id = call.from_user.id
			send_rating_request(call.message.chat.id, game_id, player_id, is_winner)
			bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É")

		elif action == "deletegame":
			_, game_id = data
			game_id = int(game_id)
			game = get_game(game_id)
			if len(get_game_players(game_id)) > 2:
				bot.answer_callback_query(call.id, "–ò–≥—Ä—É –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è")
				return
			if game['creator_id'] == call.from_user.id:
				delete_game(game_id)
				bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç")
				player_games = get_player_stats(call.from_user.id)
				send_history_page(call.message.chat.id, player_games, 0, call.message.message_id)
			else:
				bot.answer_callback_query(call.id, "–ù—ç—Ç, —Ç—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å")

		elif action == "history":
			_, page_str = data
			page = int(page_str)
			player_games = get_player_stats(call.from_user.id)

			if not player_games:
				bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
				return

			send_history_page(call.message.chat.id, player_games, page, call.message.message_id)
			bot.answer_callback_query(call.id)

		elif action == "comment_game":
			_, game_id = data
			game_id = int(game_id)
			pending_comments[call.from_user.id] = game_id
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ #{game_id}:")

		elif action == "add_achieve":
			_, achieve_index, player_id = data
			if int(player_id) != call.from_user.id:
				bot.answer_callback_query(call.id, "–¢—ã –Ω–µ —Ç—ã —á–µ—Ç–æ —è –Ω–µ —è")
				return
			achievement_name = sorted(list(ACHIEVEMENTS.keys()))[int(achieve_index)]
			add_player_achievement(int(player_id), achievement_name)
			send_achieve_info(call.message.chat.id, call.from_user.id, message_id=call.message.id, achievement_id=int(achieve_index))
			bot.answer_callback_query(call.id)

		elif action == "del_achieve":
			_, achieve_index, player_id = data
			if int(player_id) != call.from_user.id:
				bot.answer_callback_query(call.id, "–¢—ã –Ω–µ —Ç—ã —á–µ—Ç–æ —è –Ω–µ —è")
				return
			achievement_name = sorted(list(ACHIEVEMENTS.keys()))[int(achieve_index)]
			delete_player_achievement(int(player_id), achievement_name)
			send_achieve_info(call.message.chat.id, call.from_user.id, message_id=call.message.id, achievement_id=int(achieve_index))
			bot.answer_callback_query(call.id)

		elif action == "achieve":
			_, achieve_index, page_str = data
			page = int(page_str)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			send_achieve_info(call.message.chat.id, call.from_user.id, message_id=None, achievement_id=int(achieve_index))
			send_achievements_page(call.message.chat.id, message_id=None, page=page)
			bot.answer_callback_query(call.id)

		elif action == "page":
			page = int(data[1])
			game_id = int(data[2]) if len(data) > 2 else None
			player_id = int(data[3]) if len(data) > 3 else None

			if player_id is not None and player_id != call.from_user.id:
				bot.answer_callback_query(call.id, "–¢—ã –Ω–µ —Ç—ã —á–µ—Ç–æ —è –Ω–µ —è")
				return

			send_alien_page(call.message.chat.id, call.message.message_id, page, game_id, player_id)
			bot.answer_callback_query(call.id)

		elif action == "achieve_page":
			page = int(data[1])
			send_achievements_page(call.message.chat.id, call.message.message_id, page)
			bot.answer_callback_query(call.id)

		elif action == "tech_page":
			page = int(data[1])
			send_technologies_page(call.message.chat.id, call.message.message_id, page)
			bot.answer_callback_query(call.id)

		elif action == "art_page":
			page = int(data[1])
			send_artifacts_page(call.message.chat.id, call.message.message_id, page)
			bot.answer_callback_query(call.id)

		elif action == "hazard_page":
			page = int(data[1])
			send_hazards_page(call.message.chat.id, call.message.message_id, page)
			bot.answer_callback_query(call.id)

		elif action == "station_page":
			page = int(data[1])
			send_stations_page(call.message.chat.id, call.message.message_id, page)
			bot.answer_callback_query(call.id)

		elif action == "dlc":
			creator_id, dlc = data[1], data[2]
			creator_id = int(creator_id)
			if creator_id != call.from_user.id:
				bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")
				return
			dlcs = pending_games.setdefault(creator_id, {'comment': '', 'dlcs': set()})['dlcs']
			if dlc in dlcs:
				dlcs.remove(dlc)
				bot.answer_callback_query(call.id, f"–£–±—Ä–∞–Ω–æ: {dlc}")
			else:
				dlcs.add(dlc)
				bot.answer_callback_query(call.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {dlc}")
			bot.edit_message_reply_markup(
				chat_id=call.message.chat.id,
				message_id=call.message.message_id,
				reply_markup=generate_dlc_keyboard(creator_id)
			)

		elif action == "create_game":
			creator_id = int(data[1])
			if not check_player(creator_id):
				bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É –≤ –ª–∏—á–∫—É")
				return
			if creator_id not in pending_games:
				bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
				return
			comment = pending_games[creator_id]['comment']
			dlc_list = list(pending_games[creator_id]['dlcs'])
			game_id = create_game(comment, dlc_list, creator_id)

			text, keyboard = create_game_message(game_id, creator_id, comment, dlc_list, pending_game_players)
			pending_game_players[game_id] = []
			bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			del pending_games[creator_id]
			bot.answer_callback_query(call.id)

		elif action == "check_game":
			game_id = int(data[1])
			r_message = ''
			players = get_game_players(game_id)
			for i in players:
				if not i['alien']:
					r_message += f"–¢–∏–ø—É–ª—è @{bot.get_chat(i['player_id']).username} –Ω–µ –≤—ã–±—Ä–∞–ª –ø—Ä–∏—à–µ–ª—å—Ü–∞!\n"
				else:
					r_message += f"@{bot.get_chat(i['player_id']).username} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ \"{i['alien'].capitalize()}\"\n"
			bot.send_message(call.message.chat.id, r_message or "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—à–µ–ª –∏–≥—Ä–∞—Ç—å –≤ –∫–∫...")
			bot.answer_callback_query(call.id)

		elif action == "join_game":
			game_id = int(data[1])
			player_id = call.from_user.id
			if not check_player(player_id):
				bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É –≤ –ª–∏—á–∫—É")
				return
			if is_player_in_game(game_id, player_id):
				leave_from_game(game_id, player_id)
				bot.answer_callback_query(call.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã!")
				n = 0
				for i in pending_game_players[game_id]:
					if i.id == player_id:
						pending_game_players[game_id].pop(n)
					n+=1

			else:
				join_game(game_id, player_id)
				bot.send_message(player_id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–∏—à–µ–ª—å—Ü–∞")
				waitlist[player_id] = {'action':'select_alien', 'game_id':game_id}
				bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—à–µ–ª—å—Ü–∞")
				pending_game_players[game_id].append(call.from_user)

			game_data = get_game(game_id)
			creator_id = game_data['creator_id']
			dlc_list = game_data['dlc'].split(', ')
			comment = game_data['comment']
			text, keyboard = create_game_message(game_id, creator_id, comment, dlc_list, pending_game_players)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text, reply_markup=keyboard)

		elif action == "select_alien":
			_, alien_name, page_str, game_id, player_id = data
			game_id, player_id = int(game_id), int(player_id)
			if get_game(game_id)['is_over']:
				bot.delete_message(call.message.chat.id, call.message.message_id)
				bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
				return
			try:
				join_game(game_id, player_id, alien_name)
				bot.delete_message(call.message.chat.id, call.message.message_id)
				bot.send_message(player_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏—à–µ–ª—å—Ü–∞: {alien_name.capitalize()}")
				bot.answer_callback_query(call.id, "–ü—Ä–∏—à–µ–ª–µ—Ü –≤—ã–±—Ä–∞–Ω!")
			except ValueError:
				bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏—à–µ–ª–µ—Ü, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞")
				send_alien_page(player_id, None, 0, game_id, player_id)

		elif action == "end_game":
			game_id, creator_id = map(int, data[1:3])
			if call.from_user.id != creator_id:
				bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!")
				return
			players = get_game_players(game_id)
			for i in players:
				if not i['alien']:
					bot.answer_callback_query(call.id, f"–¢–∏–ø—É–ª—è @{bot.get_chat(i['player_id']).username} –Ω–µ –≤—ã–±—Ä–∞–ª –ø—Ä–∏—à–µ–ª—å—Ü–∞!")
					return
			mark_game_as_over(game_id)
			send_winner_selection(call.message.chat.id, game_id)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			bot.answer_callback_query(call.id)

		elif action == "winner_toggle":
			game_id, player_id = int(data[1]), int(data[2])
			winners = selected_winners.setdefault(game_id, set())
			if player_id in winners:
				winners.remove(player_id)
				bot.answer_callback_query(call.id, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É–±—Ä–∞–Ω")
			else:
				winners.add(player_id)
				bot.answer_callback_query(call.id, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")

			bot.edit_message_reply_markup(
				chat_id=call.message.chat.id,
				message_id=call.message.message_id,
				reply_markup=generate_updated_winner_keyboard(game_id, call.message.chat.id)
			)

		elif action == "finalize_game":
			game_id = int(data[1])
			winners = selected_winners.get(game_id, set())

			for player in get_game_players(game_id):
				is_winner = player['player_id'] in winners
				logging.debug(is_winner)
				set_player_result(game_id, player['player_id'], is_winner, None)
				send_rating_request(player['player_id'], game_id, player['player_id'], int(is_winner))

			bot.delete_message(call.message.chat.id, call.message.message_id)
			selected_winners.pop(game_id, None)
			bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

		elif action == "rate":
			game_id, player_id, is_winner, rating = map(int, data[1:5])
			set_player_result(game_id, player_id, bool(is_winner), rating)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			bot.answer_callback_query(call.id, "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
		bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		raise

@bot.message_handler(commands=['e'])
def catch_custom_emoji(message):
	if message.entities:
		for ent in message.entities:
			if ent.type == 'custom_emoji':
				custom_emoji_id = ent.custom_emoji_id
				bot.send_message(message.chat.id, f'–≠–º–æ–¥–∂–∏: `\"{message.text.split(":")[-1]}\": {custom_emoji_id},`', parse_mode='Markdown')


@bot.message_handler(func=lambda m: m.from_user.id in pending_comments)
def save_comment_handler(message):
	game_id = pending_comments.pop(message.from_user.id)
	comment = message.text.strip()

	set_player_comment(game_id, message.from_user.id, comment)

	bot.send_message(message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ #{game_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")

@bot.message_handler(func=lambda message: message.chat.id == message.from_user.id)
def send_alien_image(message):
	player_id = message.from_user.id
	if player_id in waitlist:
		pending_data = waitlist[player_id]
		if pending_data['action'] == 'select_alien':
			game_id = pending_data['game_id']
			loc_rev = {k.lower(): i for i, k in LOCALIZATION_EN.items()}

			alien = message.text.lower().strip()
			if alien in loc_rev:
				alien = loc_rev[alien]
			if alien not in ALIENS:
				bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø—Ä–∏—à–µ–ª—å—Ü–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ")
				return

			if get_game(game_id)['is_over']:
				bot.reply_to(message, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
				del(waitlist[player_id])
				return
			try:
				join_game(game_id, player_id, alien)
				bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏—à–µ–ª—å—Ü–∞: {alien.capitalize()}")
				del(waitlist[player_id])
			except ValueError:
				bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏—à–µ–ª–µ—Ü, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞")
	try:
		alien_name = message.text.replace('—ë', '–µ').lower().strip()
		send_alien_photos(message.chat.id, alien_name, message.chat.id == message.from_user.id)
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ send_alien_image: {e}")
		bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


if __name__ == '__main__':
	try:
		logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
		bot.infinity_polling()
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
